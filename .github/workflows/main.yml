name: Dave-YP-DesignCollab workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  tests:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        cd backend/
        pip install -r requirements.txt 

    - name: Test with flake8
      run: |
        cd backend/
        python -m flake8

    - name: Apply Migrations
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: postgres_test_db
      run: |
        cd backend/
        python manage.py makemigrations
        python manage.py migrate

    - name: Run Django Tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: postgres_test_db
        EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        
      run: |
        cd backend/
        python manage.py test
  
  build_and_push_backend_to_docker_hub:
    if: github.ref == 'refs/heads/main'
    name: Push backend Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/designcollab_backend:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_backend_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo systemctl stop nginx
            sudo docker-compose down --remove-orphans
            sudo docker volume rm -f root_frontend root_redoc root_static_value
            sudo docker pull carkazm/designcollab_backend:latest
            sudo docker pull annakharatova/design-collab:latest
            sudo touch .env
            sudo bash -c 'echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env'
            sudo bash -c 'echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env'
            sudo bash -c 'echo DB_NAME=${{ secrets.DB_NAME }} >> .env'
            sudo bash -c 'echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env'
            sudo bash -c 'echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env'
            sudo bash -c 'echo DB_HOST=${{ secrets.DB_HOST }} >> .env'
            sudo bash -c 'echo DB_PORT=${{ secrets.DB_PORT }} >> .env'
            sudo bash -c 'echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env'
            sudo bash -c 'echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env'
            sudo bash -c 'echo TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> .env'
            sudo bash -c 'echo TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }} >> .env'
            sudo bash -c 'echo EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }} >> .env'
            sudo bash -c 'echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env'
            sudo bash -c 'echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env'
            sudo bash -c 'echo EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} >> .env'
            sudo bash -c 'echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env'
            sudo bash -c 'echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env'

            sudo docker-compose up -d --force-recreate            
            # Удаление контейнеров фронта
            sudo docker rm -f $(sudo docker ps -a -q -f name=root-frontend-1)